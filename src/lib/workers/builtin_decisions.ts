import {ItemNewAction, ItemSaveAction, StateFetchAction} from "@/models/actions";
import {DecisionTree, EventEdge} from "@/models/all";
import {RegexProp, TrueProp} from "@/models/propositions";
import {DEvents} from "./types";

export const BUILTIN_DECISION_TREES: DecisionTree<Extract<DEvents, DEvents>, Extract<DEvents, DEvents>>[] = [];

BUILTIN_DECISION_TREES.push(
  new DecisionTree<DEvents.ItemNew, DEvents.ItemNew>({
    name: "[Builtin] Save the date",
    description: "Create a new item for all date mentions",
    events: [DEvents.ItemNew],
    edges: [
      new EventEdge(
        new RegexProp({
          regex: "(?<event>[^ ]+) on (?<date>(\\d{2}/\\d{2}/\\d{4}|\\d{4}-\\d{2}-\\d{2}|(January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d+,\\s+\\d{4}))",
        }),
        new ItemNewAction({
          uuid: crypto.randomUUID(),
          name: "Save the date!",
          description: "{{date}} for {{event}}",
          completed: false,
        }),
      ),
    ],
  })
);

// wire up the state fetch action
BUILTIN_DECISION_TREES.push(
  new DecisionTree<DEvents.StateFetch, DEvents.None>({
    name: "[Builtin] Fetch State",
    description: "An event generated by the UI to fetch the current state from the web worker",
    events: [DEvents.StateFetch],
    edges: [
      new EventEdge<DEvents.StateFetch, DEvents.None>(
        new TrueProp(),
        new StateFetchAction(),
      )
    ],
  })
);

// wire up the ItemSave, ItemDelete, ItemEdit events to use the ItemSaveAction
BUILTIN_DECISION_TREES.push(
  new DecisionTree<DEvents.ItemNew|DEvents.ItemEdit|DEvents.ItemDelete, DEvents.None>({
    name: "[Builtin] Save Item",
    description: "Save a new item to the database",
    events: [DEvents.ItemNew, DEvents.ItemEdit, DEvents.ItemDelete],
    edges: [
      new EventEdge(
        new TrueProp(),
        new ItemSaveAction(),
      )
    ]
  })
);
